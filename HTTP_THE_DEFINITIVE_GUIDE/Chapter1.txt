[Chapter1] Overview of HTTP

<Web Clients and Servers>
	- Web servers speak the HTTP protocol, so they are often called HTTP servers.
	- HTTP servers store the Internt's data and provide the data when it is requested by HTTP clients.
	- Client sends HTTP requests to servers, and servers return the requested data in HTTP responses.

<Resources>
	- Resource is any kind of content source.
	- A file containing your company's sales forecast spreadsheet is a resource
	- A web gateway to scan your local public library's shelves is a resource.
	- An Internet search engine is a resource.

<Media Types>
	- HTTP tags each object being transported through the Web with a data format label called MIME type.
	- MIME(Multipurpose Internet Mail Extensions) : designed to solve problems encountered in moving messages between different electronic mail systems.
	- Web servers attach a MIME type to all HTTP object data.
		Ex) Content-type: image/jpeg, Content-length: 12984
	- MIME type is a textual label, represented as a primary object type and specific subtype
		1) HTML-formatted text document : text/html
		2) Plain ASCII text document : text/plain
		3) JPEG version of an image : image/jpeg
		4) GIF-format image : image/gif
		5) Apple QuickTime movie : video/quicktime
		6) Microsoft PowerPoint presentation : application/vnd.ms-powerpoint

		* There are hundreds of popular MIME types, and many more experimental or limited use types.

<URIs>
	- Server resource name is called : uniform resource identifier, or URI
		+ Each web server resource has a name, so clients can point out what resources they are interested in.
	- URIs are like the postal addresses of the Internet, uniquely identifying and locating information resources around the world.
		Ex) URI for an image resource on Joe's Hardware store's Web server
			--> http://www.joes-hardware.com/specials/saw-blade.gif

<URLs>
	- URL : uniform resource locator
	- Most common form of resource identifier.
		Ex) http://www.joes-hardware.com/specials/saw-blade.gif
			--> (protocol) http:// : Use HTTP protocol
			--> (server) www.joes-hardware.com : Go to www.joes-hardware.com
			--> (local resource) /specials/saw-blade.gif : Grab the resource called /specials/saw-blade.gif

		Ex)
			1. http://www.oreilly.com/index.html : The home URL for O'Reilly & Associates, Inc.
			2. http://www.yahoo.com/images/logo.gif : The URL for the Yahoo! Web site's logo.
			3. http://www.joes-hardware.com/inventory-check.cgi?item=12731 : The URL for a program that chekcs if inventory item #12731 is in stock
			4. ftp://joe:tools4u@ftp.joes-hardware.com/locking-pilers.gif : The URL for the locking-pilers.gif image file, using password-protected FTP as the access protocol

	- Most URLs follow a standardized format of three main parts.
		1) The first part of the URL is called the "scheme"
			+ Scheme: describes the protocol used to access the resource. (Usually the HTTP protocol (http://))
		2) The second part gives the server Internet address (e.g., www.joes-hardware.com)
		3) The rest names a resource on the web server (e.g., /specials/saw-blade.gif)

	* Almost every URI is a URIL.

<URNs>
	- URN : uniform resource name
	- serves as a unique name for a particular piece of content, independent of where the resource currently resides.

<Transactions>
	- HTTP transaction consists of a request command(sent from client to server), and a response result(sent from the server back to the client).
	- This communication happens with formatted blocks of data called HTTP messages
		Ex) 
			1) Client sends HTTP request message contains the command and the URI
				(GET /specials/saw-blade.gif, HTTP/1.0, HOST: www.joes-hardware.com)
			2) Server sends HTTP response message contains the result of the transaction
				(HTTP/1.0 200 OK, Content-type: image/gif, Content-length: 8572)

<Methods>
	- Every HTTP request message has a method.
	- The method tells the server what action to perform (fetch a web page, run a gateway program, delete a file, etc.)
	- Some common HTTP methods
		1) GET : Send named resource from the server to the client.
		2) PUT : Store data from client into a named server resource.
		3) DELETE : Delete the named resource from a server.
		4) POST : Send client data into a server gateway application.
		5) HEAD : Send just the HTTP headers from the response for the named resource.

<Status Codes>
	- Every HTTP response message comes back with a status code.
	- The status code is a three-digit numeric code that tells the client if the request succeeded, or if other actions are required.
	- Some common HTTP status codes
		1) 200 : OK. Document returned correctly.
		2) 302 : Redirect. Go someplace else to get the resource.
		3) 404 : Not found. Can't find this resource.
	- Http also sends an explanatory textual "reason phrase" with each numeric status code.
	- Textual phrase is included only for descriptive purposes; the numeric code is used for all processing.
		Ex)
			1. 200 OK
			2. 200 Document attached
			3. 200 Success
			4. 200 All's cool, dude

<Web Pages Can Consist of Multiple Objects>
	- An application often issues multiple HTTP transactions to accomplish a task
		Ex)
			1. Web browser issues a cascade of HTTP transactions to fetch and display a graphic-rich web page
			2. The browser performs one transaction to fetch the HTML "skeleton" that describes the page layout.
			3. Issues additional HTTP transations for each embedded image, graphics pane, Java applet, etc.
		* These embedded resources might even reside on different servers --> Web page often is a collection of resources, not a single resource.

<Messages>
	- HTTP message are simple, line-oriented sequences of characters.
	- They are plain text, not binary, they are easy for humans to read and write.
	- Request messages : HTTP messages sent from web clients to web servers.
	- Formats of HTTP request and response messages are very similar.

	- Http messages consist of three parts
		1) Start line
			+ First line of the message
			+ Indicates what to do for a request or what happened for a response.
		2) Header fields
			+ Zero or more header fields follow the start line.
			+ Each header field consists of a name and a value, separated by a clon (:) for easy parsing.
			+ Headers end with a blank line.
		3) Body
			+ Carries data to the web server; response bodies carry data back to the client.
			+ Body can contain arbitrary binary data (e.g., images, videos, audio tracks, software applications)
			+ Body can also contain text.

		Ex)
			(Request Message)
			=================================
			GET /test/hi-there.txt HTTP/1.0 	// Start Line
			---------------------------------
			Accept: text/*
			Accept-Language: en, fr 			// Header fields
			=================================

			(Response Message)
			=================================
			HTTP/1.0 200 OK 					// Start Line
			---------------------------------
			Content-type: text/plain
			Content-length: 19 					// Header fields
												// Ends with a blank line
			---------------------------------
			Hi! I'm a message!					// Body 
			=================================			

<Connections - TCP/IP>
	- TCP provides
		1) Error-free data transporation
		2) In-order delivery (data will always arrive in the order in which it was sent)
		3) Unsegmented data stream (can dribble out data in any size at any time)

	- Internet itself is based on TCP/IP, a popular layered set of packet-switched network protocols spoken by computers and network devices around the world.
	- TCP/IP hides the peculiarities(characteristics) and foibles(weaknesses) of inidividual networks and hardware, letting computers and networks of any type talk together reliably.
	- Once a TCP connection is established, messages exchanged between the client and server computers will never be lost, damaged, or received out of order.
	- HTTP protocol is layered over TCP.
	- HTTP uses TCP to transport its message data.
	- TCP is layered over IP.

		(Http network protocol stack)
		---------------------------------
		HTTP								// Application Layer
		---------------------------------		
		TCP									// Transport Layer
		---------------------------------
		IP 									// Network Layer
		---------------------------------
		Network-specific link interface		// Data link Layer
		---------------------------------
		Physical network hardware 			// Physical Layer
		---------------------------------

<Connections, IP Addresses, and Port Numbers>
	- Before an HTTP client can send a message to a server, it needs to establish a TCP/IP connection between the client and server using Internet Protocol(IP) addresses and port numbers.
	- In TCP, you need the IP address of the server computer and the TCP port number associated with the specific software program running on the server.
	- URLs are the addresses for resources.
		Ex)
			http://207.200.83.29:80/index.html
				+ IP address: 207.200.83.29
				+ Port number: 80
			
			http://www.netscape.com:80/index.html 	
				+ No numeric IP address
				+ Has Textual domain name, or hostname("www.netscape.com")
				+ Hostname: human-friendly alias for an IP address.
				+ Hostname can easily be converted into IP addresses through a facility called the Domain Name Service(DNS).

			http://www.netscape.com/index.html
				+ No Port number(When the port number is missing from an HTTP URL, you can assume the default value of port 80)

		* With the IP address and port number, a client can easily communicate via TCP/IP.

<Telnet>
	- Telent utility connects your keyboard to a destination TCP port and connects the TCP port output back to your display screen.
	- Commonly used for remote terminal sessions, but it can generally connect to any TCP server, including HTTP servers.
	- Can use the Telnet utility to talk directly to web servers.
	- Telent lets you open a TCP connection to a port on a machine and type characters directly into the port.
	- Web server treats you as a web client, and any data sent back on the TCP connection is displayed onscreen.

<Protocol Versions>
	- HTTP/0.9
		+ supports only the GET method.
		+ does not support MIME typing of multimedia content, Http headers, or version numbers.
		+ defined to fetch simple HTML objects.

	- HTTP/1.0
		+ added version numbers, HTTP headers, additional methods, and multimedia object handling.
		+ made it practical to support graphically appealing web pages and interactive forms.

	- HTTP/1.0+
		+ long-lasting "keep-alive" connections, virtual hosting support, and proxy connection support, were added.
		+ informal, extended version of HTTP is often referred to as HTTP/1.0+

	- HTTP/1.1
		+ focused on correcting architectural flaws in the design of HTTP.
		+ specifying semantics, introducing signifacnt performance optimizations, and removing mis-features.

	- HTTP-NG(a.k.a HTTP/2.0)
		+ prototype proposal for an architectural successor to HTTP/1.1 that focuses on significant performance optimizations and a more powerful framework for remote execution of server logic.

<Architectural Components of the Web>
	- Proxies : HTTP intermediaries that sit between clients and servers
	- Caches : HTTP storehouses that keep copies of popular web pages close to clients
	- Gateways : Special web servers that connect to other applications
	- Tunnels : Special proxies that blindly forward HTTP communications
	- Agents : Semi-intelligent web clients that make automated HTTP requests

<Proxies>
	- a proxy sits between a client and a server, receiving all of the client's HTTP requests and relaying the requests to the server.
	- Applications acts as a proxy for the user, accessing the server on the user's behalf.
	- Often used for security, acting as trusted intermediaries through which all web traffic flows.
	- Can also filter requests and responses.

<Caches>
	- a web cache or caching proxy is a special type of HTTP proxy server that keeps copies of popular documents that pass through the proxy.

<Gateways>
	- special servers that act as intermediaries for other servers.
	- Often used to convert HTTP traffic to another protocol.

<Tunnels>
	- Http applications that, after setup, blindly relay raw data between two connections.
	- Often used to transport non-HTTP data over one or more HTTP connections, without looking at the data.

<Agents>
	- User agents are client programs that make HTTP requests on the user's behalf.
	- Any application that issues web reqeusts is an HTTP agent.








































